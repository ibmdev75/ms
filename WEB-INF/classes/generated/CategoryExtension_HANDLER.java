// This class was automatically generated by jsc. Please, do not edit.
// Generation date: Wed Jan 28 18:44:26 CET 2015

package generated;

import java.util.*;
import com.jalios.jstore.*;

@SuppressWarnings("unchecked")
public class CategoryExtension_HANDLER implements com.jalios.jstore.StorableHandler {

  public void setAttributes(com.jalios.jstore.Storable storable, StorableLogEntry sle, com.jalios.jstore.Store store) {
    CategoryExtension handler = (generated.CategoryExtension)storable;
    String value;
    Map attributes = sle.getAttributes();
    value = (String)attributes.get("author");
    if (value != null) {
      handler.setAuthor((com.jalios.jcms.Member)StoreUtil.decodeObject(com.jalios.jcms.Member.class, value, store, new DecodeContext(sle, "author")));
    }

    value = (String)attributes.get("authorDBID");
    if (value != null) {
      handler.setAuthorDBID((java.lang.String)StoreUtil.decodeObject(java.lang.String.class, value, store, new DecodeContext(sle, "authorDBID")));
    }

    value = (String)attributes.get("opAuthor");
    if (value != null) {
      handler.setOpAuthor((com.jalios.jcms.Member)StoreUtil.decodeObject(com.jalios.jcms.Member.class, value, store, new DecodeContext(sle, "opAuthor")));
    }

    value = (String)attributes.get("opDelegate");
    if (value != null) {
      handler.setOpDelegate((com.jalios.jcms.Member)StoreUtil.decodeObject(com.jalios.jcms.Member.class, value, store, new DecodeContext(sle, "opDelegate")));
    }

    value = (String)attributes.get("extension");
    if (value != null) {
      handler.setExtension((com.jalios.jcms.DataExtension)StoreUtil.decodeObject(com.jalios.jcms.DataExtension.class, value, store, new DecodeContext(sle, "extension")));
    }

    value = (String)attributes.get("importMap");
    if (value != null) {
      handler.setImportMap((java.util.HashMap)StoreUtil.decodeObject(java.util.HashMap.class, value, store, new DecodeContext(sle, "importMap")));
    }

    value = (String)attributes.get("extraDataMap");
    if (value != null) {
      handler.setExtraDataMap((java.util.HashMap)StoreUtil.decodeObject(java.util.HashMap.class, value, store, new DecodeContext(sle, "extraDataMap")));
    }

    value = (String)attributes.get("cdate");
    if (value != null) {
      handler.setCdate((java.util.Date)StoreUtil.decodeObject(java.util.Date.class, value, store, new DecodeContext(sle, "cdate")));
    }

    value = (String)attributes.get("mdate");
    if (value != null) {
      handler.setMdate((java.util.Date)StoreUtil.decodeObject(java.util.Date.class, value, store, new DecodeContext(sle, "mdate")));
    }

  }

  public Map getAttributes(com.jalios.jstore.Storable storable, com.jalios.jstore.Store store) {
    generated.CategoryExtension handler = (generated.CategoryExtension)storable;
    Map attributes = new HashMap();
    attributes.put("author", StoreUtil.encodeObject(handler.getAuthor(), store));
    attributes.put("authorDBID", StoreUtil.encodeObject(handler.getAuthorDBID(), store));
    attributes.put("opAuthor", StoreUtil.encodeObject(handler.getOpAuthor(), store));
    attributes.put("opDelegate", StoreUtil.encodeObject(handler.getOpDelegate(), store));
    attributes.put("extension", StoreUtil.encodeObject(handler.getExtension(), store));
    attributes.put("importMap", StoreUtil.encodeObject(handler.getImportMap(), store));
    attributes.put("extraDataMap", StoreUtil.encodeObject(handler.getExtraDataMap(), store));
    attributes.put("cdate", StoreUtil.encodeObject(handler.getCdate(), store));
    attributes.put("mdate", StoreUtil.encodeObject(handler.getMdate(), store));
    return attributes;
  }
}
